-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
CREATE TABLE custom_log(job_id int, args jsonb, extra text, runner NAME DEFAULT CURRENT_ROLE);
CREATE OR REPLACE FUNCTION custom_func(jobid int, args jsonb) RETURNS VOID LANGUAGE SQL AS
$$
  INSERT INTO custom_log VALUES($1, $2, 'custom_func');
$$;
CREATE OR REPLACE FUNCTION custom_func_definer(jobid int, args jsonb) RETURNS VOID LANGUAGE SQL AS
$$
  INSERT INTO custom_log VALUES($1, $2, 'security definer');
$$ SECURITY DEFINER;
CREATE OR REPLACE PROCEDURE custom_proc(job_id int, args jsonb) LANGUAGE SQL AS
$$
  INSERT INTO custom_log VALUES($1, $2, 'custom_proc');
$$;
-- procedure with transaction handling
CREATE OR REPLACE PROCEDURE custom_proc2(job_id int, args jsonb) LANGUAGE PLPGSQL AS
$$
BEGIN
  INSERT INTO custom_log VALUES($1, $2, 'custom_proc 1 COMMIT');
  COMMIT;
  INSERT INTO custom_log VALUES($1, $2, 'custom_proc 2 ROLLBACK');
  ROLLBACK;
  INSERT INTO custom_log VALUES($1, $2, 'custom_proc 3 COMMIT');
  COMMIT;
END
$$;
\set ON_ERROR_STOP 0
-- test bad input
SELECT add_job(NULL, '1h');
ERROR:  function or procedure cannot be NULL
SELECT add_job(0, '1h');
ERROR:  function or procedure with OID 0 does not exist
-- this will return an error about Oid 4294967295
-- while regproc is unsigned int postgres has an implicit cast from int to regproc
SELECT add_job(-1, '1h');
ERROR:  function or procedure with OID 4294967295 does not exist
SELECT add_job('invalid_func', '1h');
ERROR:  function "invalid_func" does not exist at character 16
SELECT add_job('custom_func', NULL);
ERROR:  schedule interval cannot be NULL
SELECT add_job('custom_func', 'invalid interval');
ERROR:  invalid input syntax for type interval: "invalid interval" at character 31
\set ON_ERROR_STOP 1
SELECT add_job('custom_func','1h', config:='{"type":"function"}'::jsonb);
 add_job 
---------
    1000
(1 row)

SELECT add_job('custom_proc','1h', config:='{"type":"procedure"}'::jsonb);
 add_job 
---------
    1001
(1 row)

SELECT add_job('custom_proc2','1h', config:= '{"type":"procedure"}'::jsonb);
 add_job 
---------
    1002
(1 row)

SELECT add_job('custom_func', '1h', config:='{"type":"function"}'::jsonb);
 add_job 
---------
    1003
(1 row)

SELECT add_job('custom_func_definer', '1h', config:='{"type":"function"}'::jsonb);
 add_job 
---------
    1004
(1 row)

SELECT * FROM timescaledb_information.jobs WHERE job_id != 1 ORDER BY 1;
 job_id |      application_name      | schedule_interval | max_runtime | max_retries | retry_period | proc_schema |      proc_name      |       owner       | scheduled |        config         | next_start | hypertable_schema | hypertable_name | check_schema | check_name 
--------+----------------------------+-------------------+-------------+-------------+--------------+-------------+---------------------+-------------------+-----------+-----------------------+------------+-------------------+-----------------+--------------+------------
   1000 | User-Defined Action [1000] | @ 1 hour          | @ 0         |          -1 | @ 5 mins     | public      | custom_func         | default_perm_user | t         | {"type": "function"}  |            |                   |                 |              | 
   1001 | User-Defined Action [1001] | @ 1 hour          | @ 0         |          -1 | @ 5 mins     | public      | custom_proc         | default_perm_user | t         | {"type": "procedure"} |            |                   |                 |              | 
   1002 | User-Defined Action [1002] | @ 1 hour          | @ 0         |          -1 | @ 5 mins     | public      | custom_proc2        | default_perm_user | t         | {"type": "procedure"} |            |                   |                 |              | 
   1003 | User-Defined Action [1003] | @ 1 hour          | @ 0         |          -1 | @ 5 mins     | public      | custom_func         | default_perm_user | t         | {"type": "function"}  |            |                   |                 |              | 
   1004 | User-Defined Action [1004] | @ 1 hour          | @ 0         |          -1 | @ 5 mins     | public      | custom_func_definer | default_perm_user | t         | {"type": "function"}  |            |                   |                 |              | 
(5 rows)

SELECT count(*) FROM _timescaledb_config.bgw_job WHERE config->>'type' IN ('procedure', 'function');
 count 
-------
     5
(1 row)

\set ON_ERROR_STOP 0
-- test bad input
CALL run_job(NULL);
ERROR:  job ID cannot be NULL
CALL run_job(-1);
ERROR:  job -1 not found
\set ON_ERROR_STOP 1
CALL run_job(1000);
CALL run_job(1001);
CALL run_job(1002);
CALL run_job(1003);
CALL run_job(1004);
SELECT * FROM custom_log ORDER BY job_id, extra;
 job_id |         args          |        extra         |      runner       
--------+-----------------------+----------------------+-------------------
   1000 | {"type": "function"}  | custom_func          | default_perm_user
   1001 | {"type": "procedure"} | custom_proc          | default_perm_user
   1002 | {"type": "procedure"} | custom_proc 1 COMMIT | default_perm_user
   1002 | {"type": "procedure"} | custom_proc 3 COMMIT | default_perm_user
   1003 | {"type": "function"}  | custom_func          | default_perm_user
   1004 | {"type": "function"}  | security definer     | default_perm_user
(6 rows)

\set ON_ERROR_STOP 0
-- test bad input
SELECT delete_job(NULL);
 delete_job 
------------
 
(1 row)

SELECT delete_job(-1);
ERROR:  job -1 not found
\set ON_ERROR_STOP 1
-- We keep job 1000 for some additional checks.
SELECT delete_job(1001);
 delete_job 
------------
 
(1 row)

SELECT delete_job(1002);
 delete_job 
------------
 
(1 row)

SELECT delete_job(1003);
 delete_job 
------------
 
(1 row)

SELECT delete_job(1004);
 delete_job 
------------
 
(1 row)

-- check jobs got removed
SELECT count(*) FROM timescaledb_information.jobs WHERE job_id >= 1001;
 count 
-------
     0
(1 row)

\c :TEST_DBNAME :ROLE_SUPERUSER
\set ON_ERROR_STOP 0
-- test bad input
SELECT alter_job(NULL, if_exists => false);
ERROR:  job ID cannot be NULL
SELECT alter_job(-1, if_exists => false);
ERROR:  job -1 not found
\set ON_ERROR_STOP 1
-- test bad input but don't fail
SELECT alter_job(NULL, if_exists => true);
NOTICE:  job 0 not found, skipping
 alter_job 
-----------
 
(1 row)

SELECT alter_job(-1, if_exists => true);
NOTICE:  job -1 not found, skipping
 alter_job 
-----------
 
(1 row)

-- test altering job with NULL config
SELECT job_id FROM alter_job(1000,scheduled:=false);
 job_id 
--------
   1000
(1 row)

SELECT scheduled, config FROM timescaledb_information.jobs WHERE job_id = 1000;
 scheduled |        config        
-----------+----------------------
 f         | {"type": "function"}
(1 row)

-- test updating job settings
SELECT job_id FROM alter_job(1000,config:='{"test":"test"}');
 job_id 
--------
   1000
(1 row)

SELECT scheduled, config FROM timescaledb_information.jobs WHERE job_id = 1000;
 scheduled |      config      
-----------+------------------
 f         | {"test": "test"}
(1 row)

SELECT job_id FROM alter_job(1000,scheduled:=true);
 job_id 
--------
   1000
(1 row)

SELECT scheduled, config FROM timescaledb_information.jobs WHERE job_id = 1000;
 scheduled |      config      
-----------+------------------
 t         | {"test": "test"}
(1 row)

SELECT job_id FROM alter_job(1000,scheduled:=false);
 job_id 
--------
   1000
(1 row)

SELECT scheduled, config FROM timescaledb_information.jobs WHERE job_id = 1000;
 scheduled |      config      
-----------+------------------
 f         | {"test": "test"}
(1 row)

-- Done with job 1000 now, so remove it.
SELECT delete_job(1000);
 delete_job 
------------
 
(1 row)

--test for #2793
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
-- background workers are disabled, so the job will not run --
SELECT add_job( proc=>'custom_func',
     schedule_interval=>'1h', initial_start =>'2018-01-01 10:00:00-05');
 add_job 
---------
    1005
(1 row)

SELECT job_id, next_start, scheduled, schedule_interval
FROM timescaledb_information.jobs WHERE job_id > 1000;
 job_id |          next_start          | scheduled | schedule_interval 
--------+------------------------------+-----------+-------------------
   1005 | Mon Jan 01 07:00:00 2018 PST | t         | @ 1 hour
(1 row)

\x
SELECT * FROM timescaledb_information.job_stats WHERE job_id > 1000;
-[ RECORD 1 ]----------+-----------------------------
hypertable_schema      | 
hypertable_name        | 
job_id                 | 1005
last_run_started_at    | -infinity
last_successful_finish | -infinity
last_run_status        | 
job_status             | Scheduled
last_run_duration      | 
next_start             | Mon Jan 01 07:00:00 2018 PST
total_runs             | 0
total_successes        | 0
total_failures         | 0

\x
-- tests for #3545
CREATE FUNCTION wait_for_job_to_run(job_param_id INTEGER, expected_runs INTEGER, spins INTEGER=:TEST_SPINWAIT_ITERS) RETURNS BOOLEAN LANGUAGE PLPGSQL AS
$BODY$
DECLARE
    r RECORD;
BEGIN
    FOR i in 1..spins
    LOOP
    SELECT total_successes, total_failures FROM _timescaledb_internal.bgw_job_stat WHERE job_id=job_param_id INTO r;
    IF (r.total_failures > 0) THEN
        RAISE INFO 'wait_for_job_to_run: job execution failed';
        RETURN false;
    ELSEIF (r.total_successes = expected_runs) THEN
        RETURN true;
    ELSEIF (r.total_successes > expected_runs) THEN
        RAISE 'num_runs > expected';
    ELSE
        PERFORM pg_sleep(0.1);
    END IF;
    END LOOP;
    RAISE INFO 'wait_for_job_to_run: timeout after % tries', spins;
    RETURN false;
END
$BODY$;
TRUNCATE custom_log;
-- Nested procedure call
CREATE OR REPLACE PROCEDURE custom_proc_nested(job_id int, args jsonb) LANGUAGE PLPGSQL AS
$$
BEGIN
  INSERT INTO custom_log VALUES($1, $2, 'custom_proc_nested 1 COMMIT');
  COMMIT;
  INSERT INTO custom_log VALUES($1, $2, 'custom_proc_nested 2 ROLLBACK');
  ROLLBACK;
  INSERT INTO custom_log VALUES($1, $2, 'custom_proc_nested 3 COMMIT');
  COMMIT;
END
$$;
CREATE OR REPLACE PROCEDURE custom_proc3(job_id int, args jsonb) LANGUAGE PLPGSQL AS
$$
BEGIN
    CALL custom_proc_nested(job_id, args);
END
$$;
CREATE OR REPLACE PROCEDURE custom_proc4(job_id int, args jsonb) LANGUAGE PLPGSQL AS
$$
BEGIN
    INSERT INTO custom_log VALUES($1, $2, 'custom_proc4 1 COMMIT');
    COMMIT;
    INSERT INTO custom_log VALUES($1, $2, 'custom_proc4 2 ROLLBACK');
    ROLLBACK;
    RAISE EXCEPTION 'forced exception';
    INSERT INTO custom_log VALUES($1, $2, 'custom_proc4 3 ABORT');
    COMMIT;
END
$$;
CREATE OR REPLACE PROCEDURE custom_proc5(job_id int, args jsonb) LANGUAGE PLPGSQL AS
$$
BEGIN
    CALL refresh_continuous_aggregate('conditions_summary_daily', '2021-08-01 00:00', '2021-08-31 00:00');
END
$$;
-- Remove any default jobs, e.g., telemetry
\c :TEST_DBNAME :ROLE_SUPERUSER
TRUNCATE _timescaledb_config.bgw_job RESTART IDENTITY CASCADE;
NOTICE:  truncate cascades to table "bgw_job_stat"
NOTICE:  truncate cascades to table "bgw_policy_chunk_stats"
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
SELECT add_job('custom_proc2', '1h', config := '{"type":"procedure"}'::jsonb, initial_start := now()) AS job_id_1 \gset
SELECT add_job('custom_proc3', '1h', config := '{"type":"procedure"}'::jsonb, initial_start := now()) AS job_id_2 \gset
\c :TEST_DBNAME :ROLE_SUPERUSER
-- Start Background Workers
SELECT _timescaledb_internal.start_background_workers();
 start_background_workers 
--------------------------
 t
(1 row)

-- Wait for jobs
SELECT wait_for_job_to_run(:job_id_1, 1);
 wait_for_job_to_run 
---------------------
 t
(1 row)

SELECT wait_for_job_to_run(:job_id_2, 1);
 wait_for_job_to_run 
---------------------
 t
(1 row)

-- Check results
SELECT * FROM custom_log ORDER BY job_id, extra;
 job_id |         args          |            extra            |      runner       
--------+-----------------------+-----------------------------+-------------------
   1000 | {"type": "procedure"} | custom_proc 1 COMMIT        | default_perm_user
   1000 | {"type": "procedure"} | custom_proc 3 COMMIT        | default_perm_user
   1001 | {"type": "procedure"} | custom_proc_nested 1 COMMIT | default_perm_user
   1001 | {"type": "procedure"} | custom_proc_nested 3 COMMIT | default_perm_user
(4 rows)

-- Delete previous jobs
SELECT delete_job(:job_id_1);
 delete_job 
------------
 
(1 row)

SELECT delete_job(:job_id_2);
 delete_job 
------------
 
(1 row)

TRUNCATE custom_log;
-- Forced Exception
SELECT add_job('custom_proc4', '1h', config := '{"type":"procedure"}'::jsonb, initial_start := now()) AS job_id_3 \gset
SELECT wait_for_job_to_run(:job_id_3, 1);
INFO:  wait_for_job_to_run: job execution failed
 wait_for_job_to_run 
---------------------
 f
(1 row)

-- Check results
SELECT * FROM custom_log ORDER BY job_id, extra;
 job_id |         args          |         extra         |   runner   
--------+-----------------------+-----------------------+------------
   1002 | {"type": "procedure"} | custom_proc4 1 COMMIT | super_user
(1 row)

-- Delete previous jobs
SELECT delete_job(:job_id_3);
 delete_job 
------------
 
(1 row)

CREATE TABLE conditions (
  time TIMESTAMP NOT NULL,
  location TEXT NOT NULL,
  location2 char(10) NOT NULL,
  temperature DOUBLE PRECISION NULL,
  humidity DOUBLE PRECISION NULL
) WITH (autovacuum_enabled = FALSE);
SELECT create_hypertable('conditions', 'time', chunk_time_interval := '15 days'::interval);
    create_hypertable    
-------------------------
 (1,public,conditions,t)
(1 row)

ALTER TABLE conditions
  SET (
    timescaledb.compress,
    timescaledb.compress_segmentby = 'location',
    timescaledb.compress_orderby = 'time'
);
INSERT INTO conditions
SELECT generate_series('2021-08-01 00:00'::timestamp, '2021-08-31 00:00'::timestamp, '1 day'), 'POR', 'klick', 55, 75;
-- Chunk compress stats
SELECT * FROM _timescaledb_internal.compressed_chunk_stats ORDER BY chunk_name;
 hypertable_schema | hypertable_name |     chunk_schema      |    chunk_name    | compression_status | uncompressed_heap_size | uncompressed_index_size | uncompressed_toast_size | uncompressed_total_size | compressed_heap_size | compressed_index_size | compressed_toast_size | compressed_total_size 
-------------------+-----------------+-----------------------+------------------+--------------------+------------------------+-------------------------+-------------------------+-------------------------+----------------------+-----------------------+-----------------------+-----------------------
 public            | conditions      | _timescaledb_internal | _hyper_1_1_chunk | Uncompressed       |                        |                         |                         |                         |                      |                       |                       |                      
 public            | conditions      | _timescaledb_internal | _hyper_1_2_chunk | Uncompressed       |                        |                         |                         |                         |                      |                       |                       |                      
 public            | conditions      | _timescaledb_internal | _hyper_1_3_chunk | Uncompressed       |                        |                         |                         |                         |                      |                       |                       |                      
(3 rows)

-- Compression policy
SELECT add_compression_policy('conditions', interval '1 day') AS job_id_4 \gset
SELECT wait_for_job_to_run(:job_id_4, 1);
 wait_for_job_to_run 
---------------------
 t
(1 row)

-- Chunk compress stats
SELECT * FROM _timescaledb_internal.compressed_chunk_stats ORDER BY chunk_name;
 hypertable_schema | hypertable_name |     chunk_schema      |    chunk_name    | compression_status | uncompressed_heap_size | uncompressed_index_size | uncompressed_toast_size | uncompressed_total_size | compressed_heap_size | compressed_index_size | compressed_toast_size | compressed_total_size 
-------------------+-----------------+-----------------------+------------------+--------------------+------------------------+-------------------------+-------------------------+-------------------------+----------------------+-----------------------+-----------------------+-----------------------
 public            | conditions      | _timescaledb_internal | _hyper_1_1_chunk | Compressed         |                   8192 |                   16384 |                    8192 |                   32768 |                 8192 |                 16384 |                  8192 |                 32768
 public            | conditions      | _timescaledb_internal | _hyper_1_2_chunk | Compressed         |                   8192 |                   16384 |                    8192 |                   32768 |                 8192 |                 16384 |                  8192 |                 32768
 public            | conditions      | _timescaledb_internal | _hyper_1_3_chunk | Compressed         |                   8192 |                   16384 |                    8192 |                   32768 |                 8192 |                 16384 |                  8192 |                 32768
(3 rows)

--TEST compression job after inserting data into previously compressed chunk
INSERT INTO conditions
SELECT generate_series('2021-08-01 00:00'::timestamp, '2021-08-31 00:00'::timestamp, '1 day'), 'NYC', 'nycity', 40, 40;
SELECT id, table_name, status from _timescaledb_catalog.chunk 
where hypertable_id = (select id from _timescaledb_catalog.hypertable 
                       where table_name = 'conditions')
order by id; 
 id |    table_name    | status 
----+------------------+--------
  1 | _hyper_1_1_chunk |      3
  2 | _hyper_1_2_chunk |      3
  3 | _hyper_1_3_chunk |      3
(3 rows)

--running job second time, wait for it to complete 
select t.schedule_interval FROM alter_job(:job_id_4, next_start=> now() ) t;
 schedule_interval 
-------------------
 @ 7 days 12 hours
(1 row)

SELECT wait_for_job_to_run(:job_id_4, 2);
 wait_for_job_to_run 
---------------------
 t
(1 row)

SELECT id, table_name, status from _timescaledb_catalog.chunk 
where hypertable_id = (select id from _timescaledb_catalog.hypertable 
                       where table_name = 'conditions')
order by id; 
 id |    table_name    | status 
----+------------------+--------
  1 | _hyper_1_1_chunk |      1
  2 | _hyper_1_2_chunk |      1
  3 | _hyper_1_3_chunk |      1
(3 rows)

-- Decompress chunks before create the cagg
SELECT decompress_chunk(c) FROM show_chunks('conditions') c;
            decompress_chunk            
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
 _timescaledb_internal._hyper_1_2_chunk
 _timescaledb_internal._hyper_1_3_chunk
(3 rows)

-- TEST Continuous Aggregate job
CREATE MATERIALIZED VIEW conditions_summary_daily
WITH (timescaledb.continuous) AS
SELECT location,
   time_bucket(INTERVAL '1 day', time) AS bucket,
   AVG(temperature),
   MAX(temperature),
   MIN(temperature)
FROM conditions
GROUP BY location, bucket
WITH NO DATA;
-- Refresh Continous Aggregate by Job
SELECT add_job('custom_proc5', '1h', config := '{"type":"procedure"}'::jsonb, initial_start := now()) AS job_id_5 \gset
SELECT wait_for_job_to_run(:job_id_5, 1);
 wait_for_job_to_run 
---------------------
 t
(1 row)

SELECT count(*) FROM conditions_summary_daily;
 count 
-------
    62
(1 row)

-- TESTs for alter_job_set_hypertable_id API
SELECT _timescaledb_internal.alter_job_set_hypertable_id( :job_id_5, NULL);
 alter_job_set_hypertable_id 
-----------------------------
                        1004
(1 row)

SELECT id, proc_name, hypertable_id 
FROM _timescaledb_config.bgw_job WHERE id = :job_id_5;
  id  |  proc_name   | hypertable_id 
------+--------------+---------------
 1004 | custom_proc5 |              
(1 row)

-- error case, try to associate with a PG relation
\set ON_ERROR_STOP 0
SELECT _timescaledb_internal.alter_job_set_hypertable_id( :job_id_5, 'custom_log');
ERROR:  relation "custom_log" is not a hypertable or continuous aggregate
\set ON_ERROR_STOP 1
-- TEST associate the cagg with the job
SELECT _timescaledb_internal.alter_job_set_hypertable_id( :job_id_5, 'conditions_summary_daily'::regclass);
 alter_job_set_hypertable_id 
-----------------------------
                        1004
(1 row)

SELECT id, proc_name, hypertable_id 
FROM _timescaledb_config.bgw_job WHERE id = :job_id_5;
  id  |  proc_name   | hypertable_id 
------+--------------+---------------
 1004 | custom_proc5 |             3
(1 row)

--verify that job is dropped when cagg is dropped
DROP MATERIALIZED VIEW conditions_summary_daily;
NOTICE:  drop cascades to table _timescaledb_internal._hyper_3_10_chunk
SELECT id, proc_name, hypertable_id 
FROM _timescaledb_config.bgw_job WHERE id = :job_id_5;
 id | proc_name | hypertable_id 
----+-----------+---------------
(0 rows)

-- Stop Background Workers
SELECT _timescaledb_internal.stop_background_workers();
 stop_background_workers 
-------------------------
 t
(1 row)

SELECT _timescaledb_internal.restart_background_workers();
 restart_background_workers 
----------------------------
 t
(1 row)

\set ON_ERROR_STOP 0
-- add test for custom jobs with custom check functions
-- create the functions/procedures to be used as checking functions
CREATE OR REPLACE PROCEDURE test_config_check_proc(config jsonb)
LANGUAGE PLPGSQL
AS $$
DECLARE
  drop_after interval;
BEGIN 
    SELECT jsonb_object_field_text (config, 'drop_after')::interval INTO STRICT drop_after;
    IF drop_after IS NULL THEN 
        RAISE EXCEPTION 'Config must be not NULL and have drop_after';
    END IF ;
END
$$;
CREATE OR REPLACE FUNCTION test_config_check_func(config jsonb) RETURNS VOID
AS $$
DECLARE
  drop_after interval;
BEGIN 
    IF config IS NULL THEN
        RETURN;
    END IF;
    SELECT jsonb_object_field_text (config, 'drop_after')::interval INTO STRICT drop_after;
    IF drop_after IS NULL THEN 
        RAISE EXCEPTION 'Config can be NULL but must have drop_after if not';
    END IF ;
END
$$ LANGUAGE PLPGSQL;
-- step 2, create a procedure to run as a custom job
CREATE OR REPLACE PROCEDURE test_proc_with_check(job_id int, config jsonb)
LANGUAGE PLPGSQL
AS $$
BEGIN
  RAISE NOTICE 'Will only print this if config passes checks, my config is %', config; 
END
$$;
-- step 3, add the job with the config check function passed as argument
-- test procedures, should get an unsupported error
select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 'test_config_check_proc'::regproc);
ERROR:  unsupported function type
-- test functions
select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 'test_config_check_func'::regproc);
ERROR:  Config can be NULL but must have drop_after if not
select add_job('test_proc_with_check', '5 secs', config => NULL, check_config => 'test_config_check_func'::regproc);
 add_job 
---------
    1005
(1 row)

select add_job('test_proc_with_check', '5 secs', config => '{"drop_after": "chicken"}', check_config => 'test_config_check_func'::regproc);
ERROR:  invalid input syntax for type interval: "chicken"
select add_job('test_proc_with_check', '5 secs', config => '{"drop_after": "2 weeks"}', check_config => 'test_config_check_func'::regproc) 
as job_with_func_check_id \gset
--- test alter_job
select alter_job(:job_with_func_check_id, config => '{"drop_after":"chicken"}');
ERROR:  invalid input syntax for type interval: "chicken"
select alter_job(:job_with_func_check_id, config => '{"drop_after":"5 years"}');
                                                    alter_job                                                    
-----------------------------------------------------------------------------------------------------------------
 (1006,"@ 5 secs","@ 0",-1,"@ 5 mins",t,"{""drop_after"": ""5 years""}",-infinity,public.test_config_check_func)
(1 row)

-- test that jobs with an incorrect check function signature will not be registered
-- these are all incorrect function signatures 
CREATE OR REPLACE FUNCTION test_config_check_func_0args() RETURNS VOID
AS $$
BEGIN 
    RAISE NOTICE 'I take no arguments and will validate anything you give me!';
END
$$ LANGUAGE PLPGSQL;
CREATE OR REPLACE FUNCTION test_config_check_func_2args(config jsonb, intarg int) RETURNS VOID
AS $$
BEGIN 
    RAISE NOTICE 'I take two arguments (jsonb, int) and I should fail to run!';
END
$$ LANGUAGE PLPGSQL;
CREATE OR REPLACE FUNCTION test_config_check_func_intarg(config int) RETURNS VOID
AS $$
BEGIN 
    RAISE NOTICE 'I take one argument which is an integer and I should fail to run!';
END
$$ LANGUAGE PLPGSQL;
-- -- this should fail, it has an incorrect check function 
select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 'test_config_check_func_0args'::regproc);
ERROR:  function or procedure public.test_config_check_func_0args(config jsonb) not found
-- -- so should this
select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 'test_config_check_func_2args'::regproc);
ERROR:  function or procedure public.test_config_check_func_2args(config jsonb) not found
-- and this
select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 'test_config_check_func_intarg'::regproc);
ERROR:  function or procedure public.test_config_check_func_intarg(config jsonb) not found
-- and this fails as it calls a nonexistent function
select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 'test_nonexistent_check_func'::regproc);
ERROR:  function "test_nonexistent_check_func" does not exist at character 82
-- when called with a valid check function and a NULL config no check should occur
CREATE OR REPLACE FUNCTION test_config_check_func(config jsonb) RETURNS VOID
AS $$
BEGIN 
    RAISE NOTICE 'This message will get printed for both NULL and not NULL config';
END
$$ LANGUAGE PLPGSQL;
SET client_min_messages = NOTICE;
-- check done for both NULL and non-NULL config
select add_job('test_proc_with_check', '5 secs', config => NULL, check_config => 'test_config_check_func'::regproc);
NOTICE:  This message will get printed for both NULL and not NULL config
 add_job 
---------
    1007
(1 row)

-- check done
select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 'test_config_check_func'::regproc) as job_id \gset
NOTICE:  This message will get printed for both NULL and not NULL config
-- check function not returning void
CREATE OR REPLACE FUNCTION test_config_check_func_returns_int(config jsonb) RETURNS INT
AS $$
BEGIN 
    raise notice 'I print a message, and then I return least(1,2)';
    RETURN LEAST(1, 2);
END
$$ LANGUAGE PLPGSQL;
select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 'test_config_check_func_returns_int'::regproc) as job_id_int \gset
NOTICE:  I print a message, and then I return least(1,2)
-- drop the registered check function, verify that alter_job will work and print a warning that 
-- the check is being skipped due to the check function missing
ALTER FUNCTION test_config_check_func RENAME TO renamed_func;
select alter_job(:job_id, schedule_interval => '1 hour');
WARNING:  function public.test_config_check_func(config jsonb) not found, skipping config validation for job 1008
                                     alter_job                                      
------------------------------------------------------------------------------------
 (1008,"@ 1 hour","@ 0",-1,"@ 5 mins",t,{},-infinity,public.test_config_check_func)
(1 row)

DROP FUNCTION test_config_check_func_returns_int;
select alter_job(:job_id_int, config => '{"field":"value"}');
WARNING:  function public.test_config_check_func_returns_int(config jsonb) not found, skipping config validation for job 1009
                                                      alter_job                                                       
----------------------------------------------------------------------------------------------------------------------
 (1009,"@ 5 secs","@ 0",-1,"@ 5 mins",t,"{""field"": ""value""}",-infinity,public.test_config_check_func_returns_int)
(1 row)

-- rename the check function and then call alter_job to register the new name
select alter_job(:job_id, check_config => 'renamed_func'::regproc);
NOTICE:  This message will get printed for both NULL and not NULL config
                                alter_job                                 
--------------------------------------------------------------------------
 (1008,"@ 1 hour","@ 0",-1,"@ 5 mins",t,{},-infinity,public.renamed_func)
(1 row)

-- run alter again, should get a config check
select alter_job(:job_id, config => '{}');
NOTICE:  This message will get printed for both NULL and not NULL config
                                alter_job                                 
--------------------------------------------------------------------------
 (1008,"@ 1 hour","@ 0",-1,"@ 5 mins",t,{},-infinity,public.renamed_func)
(1 row)

-- do not drop the current check function but register a new one
CREATE OR REPLACE FUNCTION substitute_check_func(config jsonb) RETURNS VOID
AS $$
BEGIN 
    RAISE NOTICE 'This message is a substitute of the previously printed one';
END
$$ LANGUAGE PLPGSQL;
-- register the new check
select alter_job(:job_id, check_config => 'substitute_check_func');
NOTICE:  This message is a substitute of the previously printed one
                                     alter_job                                     
-----------------------------------------------------------------------------------
 (1008,"@ 1 hour","@ 0",-1,"@ 5 mins",t,{},-infinity,public.substitute_check_func)
(1 row)

select alter_job(:job_id, config => '{}');
NOTICE:  This message is a substitute of the previously printed one
                                     alter_job                                     
-----------------------------------------------------------------------------------
 (1008,"@ 1 hour","@ 0",-1,"@ 5 mins",t,{},-infinity,public.substitute_check_func)
(1 row)

RESET client_min_messages;
-- test an oid that doesn't exist
select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 17424217::regproc);
ERROR:  function with OID 17424217 does not exist
\c :TEST_DBNAME :ROLE_SUPERUSER
-- test a function with insufficient privileges
create schema test_schema;
create role user_noexec with login;
grant usage on schema test_schema to user_noexec;
CREATE OR REPLACE FUNCTION test_schema.test_config_check_func_privileges(config jsonb) RETURNS VOID
AS $$
BEGIN 
    RAISE NOTICE 'This message will only get printed if privileges suffice';
END
$$ LANGUAGE PLPGSQL;
revoke execute on function test_schema.test_config_check_func_privileges from public;
-- verify the user doesn't have execute permissions on the function
select has_function_privilege('user_noexec', 'test_schema.test_config_check_func_privileges(jsonb)', 'execute');
 has_function_privilege 
------------------------
 f
(1 row)

\c :TEST_DBNAME user_noexec
-- user_noexec should not have exec permissions on this function
select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 'test_schema.test_config_check_func_privileges'::regproc);
ERROR:  permission denied for function "test_config_check_func_privileges"
\c :TEST_DBNAME :ROLE_SUPERUSER
-- check that alter_job rejects a check function with invalid signature
select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 'renamed_func') as job_id_alter \gset
NOTICE:  This message will get printed for both NULL and not NULL config
select alter_job(:job_id_alter, check_config => 'test_config_check_func_0args');
ERROR:  function or procedure public.test_config_check_func_0args(config jsonb) not found
select alter_job(:job_id_alter);
NOTICE:  This message will get printed for both NULL and not NULL config
                                alter_job                                 
--------------------------------------------------------------------------
 (1010,"@ 5 secs","@ 0",-1,"@ 5 mins",t,{},-infinity,public.renamed_func)
(1 row)

-- test that we can unregister the check function
select alter_job(:job_id_alter, check_config => 0);
                       alter_job                       
-------------------------------------------------------
 (1010,"@ 5 secs","@ 0",-1,"@ 5 mins",t,{},-infinity,)
(1 row)

-- no message printed now
select alter_job(:job_id_alter, config => '{}'); 
                       alter_job                       
-------------------------------------------------------
 (1010,"@ 5 secs","@ 0",-1,"@ 5 mins",t,{},-infinity,)
(1 row)

-- test what happens if the check function contains a COMMIT
-- procedure with transaction handling
CREATE OR REPLACE PROCEDURE custom_proc2_jsonb(config jsonb) LANGUAGE PLPGSQL AS
$$
BEGIN
--   RAISE NOTICE 'Starting some transactions inside procedure';
  INSERT INTO custom_log VALUES(1, $1, 'custom_proc 1 COMMIT');
  COMMIT;
END
$$;
select add_job('test_proc_with_check', '5 secs', config => '{}') as job_id_err \gset
select alter_job(:job_id_err, check_config => 'custom_proc2_jsonb');
ERROR:  portal snapshots (0) did not account for all active snapshots (1)
select alter_job(:job_id_err, schedule_interval => '3 minutes');
                       alter_job                       
-------------------------------------------------------
 (1012,"@ 3 mins","@ 0",-1,"@ 5 mins",t,{},-infinity,)
(1 row)

select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 'custom_proc2_jsonb') as job_id_commit \gset
ERROR:  portal snapshots (0) did not account for all active snapshots (1)
-- test the case where we have a background job that registers jobs with a check fn
CREATE OR REPLACE PROCEDURE add_scheduled_jobs_with_check(job_id int, config jsonb) LANGUAGE PLPGSQL AS 
$$
BEGIN
    perform add_job('test_proc_with_check', schedule_interval => '10 secs', config => '{}', check_config => 'renamed_func');
END
$$;
select add_job('add_scheduled_jobs_with_check', schedule_interval => '1 hour') as last_job_id \gset
-- wait for enough time
SELECT wait_for_job_to_run(:last_job_id, 1);
 wait_for_job_to_run 
---------------------
 t
(1 row)

select total_runs, total_successes, last_run_status from timescaledb_information.job_stats where job_id = :last_job_id;
 total_runs | total_successes | last_run_status 
------------+-----------------+-----------------
          1 |               1 | Success
(1 row)

-- test coverage for alter_job
-- registering an invalid oid
select alter_job(:job_id_alter, check_config => 123456789::regproc);
ERROR:  function with OID 123456789 does not exist
-- registering a function with insufficient privileges
\c :TEST_DBNAME user_noexec
select * from add_job('test_proc_with_check', '5 secs', config => '{}') as job_id_owner \gset
select * from alter_job(:job_id_owner, check_config => 'test_schema.test_config_check_func_privileges'::regproc);
ERROR:  permission denied for function "test_config_check_func_privileges"
\c :TEST_DBNAME :ROLE_SUPERUSER
DROP SCHEMA test_schema CASCADE;
NOTICE:  drop cascades to function test_schema.test_config_check_func_privileges(jsonb)
DROP ROLE user_noexec;
-- test with aggregate check proc
create function jsonb_add (j1 jsonb, j2 jsonb) returns jsonb
AS $$
BEGIN 
    RETURN j1 || j2;
END
$$ LANGUAGE PLPGSQL;
create table jsonb_values (j jsonb, i int);
insert into jsonb_values values ('{"refresh_after":"2 weeks"}', 1), ('{"compress_after":"2 weeks"}', 2), ('{"drop_after":"2 weeks"}', 3);
CREATE AGGREGATE sum_jsb (jsonb)
(
    sfunc = jsonb_add,
    stype = jsonb,
    initcond = '{}'
);
-- for test coverage, check unsupported aggregate type
select add_job('test_proc_with_check', '5 secs', config => '{}', check_config => 'sum_jsb'::regproc);
ERROR:  unsupported function type
